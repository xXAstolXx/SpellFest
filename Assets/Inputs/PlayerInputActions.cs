//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""KeyboardMouse"",
            ""id"": ""bd54186c-2653-4ad8-8a58-dbc180d36574"",
            ""actions"": [
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e4162cc5-5262-407e-a75d-a51505d43397"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRight"",
                    ""type"": ""Button"",
                    ""id"": ""c95216b3-502c-468b-8a2d-106263aa8c86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""One"",
                    ""type"": ""Button"",
                    ""id"": ""3e9252e8-b0e3-42a6-9468-6d88b448f0a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Two"",
                    ""type"": ""Button"",
                    ""id"": ""86be171d-53a8-4f1f-98a8-5cbebfa3d571"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Three"",
                    ""type"": ""Button"",
                    ""id"": ""1e8b3dec-9475-4cdd-8d60-b05fd7927a77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""bb2cae79-28f3-4914-96f2-7a73125a4e0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""2703bfd0-2b22-44db-aa42-70c29f48a1c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractKey"",
                    ""type"": ""Button"",
                    ""id"": ""28956755-23db-411b-b079-54c68c8325fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3fba8105-8fab-4675-a9ce-0f23a76d8375"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""84effac7-9890-4b75-9ac4-1ce43919440b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ef4c0bd-4fe8-4506-a27b-30474a9c603a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d0afd09-dabe-4485-86f9-ac4c19f66332"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""930daa62-383c-4808-809f-e752fde73f15"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""One"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67415441-73e8-4da3-9d06-61b7d2cfda34"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Two"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc826500-6cb7-4782-9af3-521707fa78dc"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Three"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5489e766-954e-4f9c-96f9-9c8112516bd7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aa4504c2-cac7-4d89-94e0-206feeda81e3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2cd20191-89b5-4b47-b374-cf36a3ff487c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e458ba89-60bf-40ef-93af-039d3b57aa14"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f949de66-8136-424e-9a36-bb375618f54a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""68132e6a-b6e1-4f98-b79a-92749addea9d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11c72846-4a1a-4126-939e-d100455b5cc1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c41bf2b6-40e6-4f7f-8232-d2cc082dcff5"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f20df8c8-5826-4bea-933a-74626a74f4f1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardMouse
        m_KeyboardMouse = asset.FindActionMap("KeyboardMouse", throwIfNotFound: true);
        m_KeyboardMouse_MouseLeft = m_KeyboardMouse.FindAction("MouseLeft", throwIfNotFound: true);
        m_KeyboardMouse_MouseRight = m_KeyboardMouse.FindAction("MouseRight", throwIfNotFound: true);
        m_KeyboardMouse_One = m_KeyboardMouse.FindAction("One", throwIfNotFound: true);
        m_KeyboardMouse_Two = m_KeyboardMouse.FindAction("Two", throwIfNotFound: true);
        m_KeyboardMouse_Three = m_KeyboardMouse.FindAction("Three", throwIfNotFound: true);
        m_KeyboardMouse_WASD = m_KeyboardMouse.FindAction("WASD", throwIfNotFound: true);
        m_KeyboardMouse_Space = m_KeyboardMouse.FindAction("Space", throwIfNotFound: true);
        m_KeyboardMouse_InteractKey = m_KeyboardMouse.FindAction("InteractKey", throwIfNotFound: true);
        m_KeyboardMouse_MouseWheel = m_KeyboardMouse.FindAction("MouseWheel", throwIfNotFound: true);
        m_KeyboardMouse_Escape = m_KeyboardMouse.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardMouse
    private readonly InputActionMap m_KeyboardMouse;
    private List<IKeyboardMouseActions> m_KeyboardMouseActionsCallbackInterfaces = new List<IKeyboardMouseActions>();
    private readonly InputAction m_KeyboardMouse_MouseLeft;
    private readonly InputAction m_KeyboardMouse_MouseRight;
    private readonly InputAction m_KeyboardMouse_One;
    private readonly InputAction m_KeyboardMouse_Two;
    private readonly InputAction m_KeyboardMouse_Three;
    private readonly InputAction m_KeyboardMouse_WASD;
    private readonly InputAction m_KeyboardMouse_Space;
    private readonly InputAction m_KeyboardMouse_InteractKey;
    private readonly InputAction m_KeyboardMouse_MouseWheel;
    private readonly InputAction m_KeyboardMouse_Escape;
    public struct KeyboardMouseActions
    {
        private @PlayerInputActions m_Wrapper;
        public KeyboardMouseActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeft => m_Wrapper.m_KeyboardMouse_MouseLeft;
        public InputAction @MouseRight => m_Wrapper.m_KeyboardMouse_MouseRight;
        public InputAction @One => m_Wrapper.m_KeyboardMouse_One;
        public InputAction @Two => m_Wrapper.m_KeyboardMouse_Two;
        public InputAction @Three => m_Wrapper.m_KeyboardMouse_Three;
        public InputAction @WASD => m_Wrapper.m_KeyboardMouse_WASD;
        public InputAction @Space => m_Wrapper.m_KeyboardMouse_Space;
        public InputAction @InteractKey => m_Wrapper.m_KeyboardMouse_InteractKey;
        public InputAction @MouseWheel => m_Wrapper.m_KeyboardMouse_MouseWheel;
        public InputAction @Escape => m_Wrapper.m_KeyboardMouse_Escape;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMouseActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Add(instance);
            @MouseLeft.started += instance.OnMouseLeft;
            @MouseLeft.performed += instance.OnMouseLeft;
            @MouseLeft.canceled += instance.OnMouseLeft;
            @MouseRight.started += instance.OnMouseRight;
            @MouseRight.performed += instance.OnMouseRight;
            @MouseRight.canceled += instance.OnMouseRight;
            @One.started += instance.OnOne;
            @One.performed += instance.OnOne;
            @One.canceled += instance.OnOne;
            @Two.started += instance.OnTwo;
            @Two.performed += instance.OnTwo;
            @Two.canceled += instance.OnTwo;
            @Three.started += instance.OnThree;
            @Three.performed += instance.OnThree;
            @Three.canceled += instance.OnThree;
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @InteractKey.started += instance.OnInteractKey;
            @InteractKey.performed += instance.OnInteractKey;
            @InteractKey.canceled += instance.OnInteractKey;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IKeyboardMouseActions instance)
        {
            @MouseLeft.started -= instance.OnMouseLeft;
            @MouseLeft.performed -= instance.OnMouseLeft;
            @MouseLeft.canceled -= instance.OnMouseLeft;
            @MouseRight.started -= instance.OnMouseRight;
            @MouseRight.performed -= instance.OnMouseRight;
            @MouseRight.canceled -= instance.OnMouseRight;
            @One.started -= instance.OnOne;
            @One.performed -= instance.OnOne;
            @One.canceled -= instance.OnOne;
            @Two.started -= instance.OnTwo;
            @Two.performed -= instance.OnTwo;
            @Two.canceled -= instance.OnTwo;
            @Three.started -= instance.OnThree;
            @Three.performed -= instance.OnThree;
            @Three.canceled -= instance.OnThree;
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @InteractKey.started -= instance.OnInteractKey;
            @InteractKey.performed -= instance.OnInteractKey;
            @InteractKey.canceled -= instance.OnInteractKey;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IKeyboardMouseActions instance)
        {
            if (m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardMouseActions @KeyboardMouse => new KeyboardMouseActions(this);
    public interface IKeyboardMouseActions
    {
        void OnMouseLeft(InputAction.CallbackContext context);
        void OnMouseRight(InputAction.CallbackContext context);
        void OnOne(InputAction.CallbackContext context);
        void OnTwo(InputAction.CallbackContext context);
        void OnThree(InputAction.CallbackContext context);
        void OnWASD(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
        void OnInteractKey(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
